// drive.js - T∆∞∆°ng t√°c v·ªõi Google Drive
const ANALYSIS_CACHE_NAME = 'StoryAnalysisCache';
const STORY_FOLDER_NAME = 'QuanLyTruyen';

// Qu√©t th∆∞ m·ª•c ƒë·ªÉ t√¨m file TXT
async function scanFolder() {
    if (!gapi.client.getToken()) {
        updateStatus('‚ùå Vui l√≤ng ƒëƒÉng nh·∫≠p Google Drive tr∆∞·ªõc');
        return;
    }
    
    updateStatus('üîç ƒêang qu√©t th∆∞ m·ª•c...');
    
    try {
        // T√¨m t·∫•t c·∫£ file TXT
        const response = await gapi.client.drive.files.list({
            q: "mimeType='text/plain' and trashed=false",
            fields: 'files(id, name, parents, modifiedTime)',
            pageSize: 100
        });
        
        const files = response.result.files;
        if (files.length === 0) {
            updateStatus('‚ùå Kh√¥ng t√¨m th·∫•y file TXT n√†o');
            return;
        }
        
        // L·∫•y th√¥ng tin th∆∞ m·ª•c cha cho m·ªói file
        const filesWithFolder = await Promise.all(files.map(async file => {
            let folderPath = 'Kh√¥ng x√°c ƒë·ªãnh';
            if (file.parents && file.parents.length > 0) {
                const folderResponse = await gapi.client.drive.files.get({
                    fileId: file.parents[0],
                    fields: 'name'
                });
                folderPath = folderResponse.result.name;
            }
            
            return {
                id: file.id,
                name: file.name,
                folder: folderPath,
                modifiedTime: file.modifiedTime
            };
        }));
        
        // Hi·ªÉn th·ªã danh s√°ch file
        displayFileList(filesWithFolder);
        window.scannedFiles = filesWithFolder;
        
        updateStatus(`‚úÖ ƒê√£ t√¨m th·∫•y ${files.length} file TXT`);
        document.getElementById('analyzeBtn').disabled = false;
        
    } catch (error) {
        console.error('L·ªói khi qu√©t th∆∞ m·ª•c:', error);
        updateStatus(`‚ùå L·ªói khi qu√©t: ${error.message}`);
    }
}

// Hi·ªÉn th·ªã danh s√°ch file
function displayFileList(files) {
    const fileListDiv = document.getElementById('fileList');
    fileListDiv.innerHTML = '';
    
    files.forEach(file => {
        const fileItem = document.createElement('div');
        fileItem.className = 'file-item';
        fileItem.innerHTML = `
            <div class="file-name">${file.name}</div>
            <div class="file-actions">
                <small>${file.folder}</small>
            </div>
        `;
        fileListDiv.appendChild(fileItem);
    });
}

// Ph√¢n t√≠ch c√°c file ƒë√£ ch·ªçn
async function analyzeFiles() {
    if (!window.scannedFiles || window.scannedFiles.length === 0) {
        updateStatus('‚ùå Kh√¥ng c√≥ file n√†o ƒë·ªÉ ph√¢n t√≠ch');
        return;
    }
    
    updateStatus('üß† ƒêang ph√¢n t√≠ch...');
    
    try {
        // ƒê·ªçc n·ªôi dung t·ª´ng file
        const fileContents = await Promise.all(
            window.scannedFiles.map(async file => {
                const response = await gapi.client.drive.files.get({
                    fileId: file.id,
                    alt: 'media'
                });
                return {
                    name: file.name,
                    content: response.body
                };
            })
        );
        
        // Ph√¢n t√≠ch n√¢ng cao
        const analysisResults = await performAdvancedAnalysis(fileContents);
        window.analysisData = analysisResults;
        
        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        displayAdvancedAnalysisResults();
        
        // L∆∞u v√†o cache
        cacheManager.saveToLocalCache(CACHE_KEYS.ANALYSIS_DATA, analysisResults);
        
        updateStatus(`‚úÖ ƒê√£ ph√¢n t√≠ch ${fileContents.length} file`);
        document.getElementById('saveBtn').disabled = false;
        document.getElementById('generateBtn').disabled = false;
        
    } catch (error) {
        console.error('L·ªói khi ph√¢n t√≠ch:', error);
        updateStatus(`‚ùå L·ªói khi ph√¢n t√≠ch: ${error.message}`);
    }
}

// Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch n√¢ng cao
function displayAdvancedAnalysisResults() {
    if (!window.analysisData) return;
    
    const resultsDiv = document.getElementById('analysisResults');
    resultsDiv.innerHTML = '';
    
    // T·∫°o giao di·ªán hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
    const analysis = window.analysisData;
    
    // T·ªïng quan
    const overviewSection = createCollapsibleSection('üìä T·ªïng quan ph√¢n t√≠ch', `
        <div class="stat-grid">
            <div class="stat-card">
                <div class="stat-number">${analysis.totalFiles}</div>
                <div class="stat-label">T·ªïng s·ªë file</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${analysis.totalWords.toLocaleString()}</div>
                <div class="stat-label">T·ªïng s·ªë t·ª´</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">${analysis.totalCharacters.toLocaleString()}</div>
                <div class="stat-label">T·ªïng s·ªë k√Ω t·ª±</div>
            </div>
        </div>
    `);
    resultsDiv.appendChild(overviewSection);
    
    // Ph√¢n t√≠ch ng√¥n ng·ªØ
    const languageSection = createCollapsibleSection('üî§ Ph√¢n t√≠ch ng√¥n ng·ªØ', `
        <p><strong>ƒê·ªô ph·ª©c t·∫°p c√¢u:</strong> ${analysis.language.complexity}</p>
        <p><strong>T·ª´ v·ª±ng ƒëa d·∫°ng:</strong> ${analysis.language.vocabularyDiversity}</p>
        <p><strong>T·ª∑ l·ªá t·ª´ c·∫£m x√∫c:</strong> ${analysis.language.emotionWordRatio}</p>
        <p><strong>Phong c√°ch vi·∫øt:</strong> ${analysis.language.writingStyle}</p>
    `);
    resultsDiv.appendChild(languageSection);
    
    // Nh√¢n v·∫≠t
    if (analysis.characters && analysis.characters.length > 0) {
        const charactersHTML = analysis.characters.map(char => `
            <div class="character-item">
                <strong>${char.name}</strong>: ${char.description}
                <br><small>T·∫ßn su·∫•t: ${char.frequency} l·∫ßn xu·∫•t hi·ªán</small>
            </div>
        `).join('');
        
        const characterSection = createCollapsibleSection('üë• Nh√¢n v·∫≠t ch√≠nh', charactersHTML);
        resultsDiv.appendChild(characterSection);
    }
    
    // Ch·ªß ƒë·ªÅ
    if (analysis.themes && analysis.themes.length > 0) {
        const themesHTML = analysis.themes.map(theme => `
            <div class="theme-item">
                <strong>${theme.name}</strong>: ${theme.strength}
            </div>
        `).join('');
        
        const themeSection = createCollapsibleSection('üéØ Ch·ªß ƒë·ªÅ ch√≠nh', themesHTML);
        resultsDiv.appendChild(themeSection);
    }
    
    // C·ªët truy·ªán
    if (analysis.plot && analysis.plot.structure) {
        const plotSection = createCollapsibleSection('üìñ C·∫•u tr√∫c c·ªët truy·ªán', `
            <p><strong>Ki·ªÉu c·ªët truy·ªán:</strong> ${analysis.plot.type}</p>
            <p><strong>ƒê·ªô ph·ª©c t·∫°p:</strong> ${analysis.plot.complexity}</p>
            <p><strong>ƒêi·ªÉm cao tr√†o:</strong> ${analysis.plot.climaxPoints.join(', ')}</p>
        `);
        resultsDiv.appendChild(plotSection);
    }
}

// T·∫°o section c√≥ th·ªÉ thu g·ªçn
function createCollapsibleSection(title, content) {
    const section = document.createElement('div');
    section.className = 'collapsible-section';
    
    const header = document.createElement('div');
    header.className = 'collapsible-header';
    header.innerHTML = title;
    header.addEventListener('click', () => {
        contentDiv.classList.toggle('hidden');
    });
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'collapsible-content';
    contentDiv.innerHTML = content;
    
    section.appendChild(header);
    section.appendChild(contentDiv);
    
    return section;
}