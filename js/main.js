// main.js - entry point
document.addEventListener('DOMContentLoaded', function() {
    // Kh·ªüi t·∫°o tab
    initTabs();
    
    // X·ª≠ l√Ω authentication
    document.getElementById('loginBtn')?.addEventListener('click', handleAuthClick);
    document.getElementById('logoutBtn')?.addEventListener('click', handleSignoutClick);
    
    // X·ª≠ l√Ω ph√¢n t√≠ch
    document.getElementById('scanBtn')?.addEventListener('click', scanFolder);
    document.getElementById('analyzeBtn')?.addEventListener('click', analyzeFiles);
    document.getElementById('saveBtn')?.addEventListener('click', saveAnalysisResults);
    document.getElementById('loadBtn')?.addEventListener('click', loadAnalysisResults);
    
    // X·ª≠ l√Ω t·∫°o truy·ªán
    document.getElementById('generateBtn')?.addEventListener('click', generateStory);
    document.getElementById('saveStoryBtn')?.addEventListener('click', saveStoryToDrive);
    
    // X·ª≠ l√Ω c√†i ƒë·∫∑t
    document.getElementById('clearCacheBtn')?.addEventListener('click', clearCache);
    
    // Ki·ªÉm tra cache khi kh·ªüi ƒë·ªông
    checkCacheOnStartup();
});

// Kh·ªüi t·∫°o tab system
function initTabs() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tabId = button.getAttribute('data-tab');
            
            // ·∫®n t·∫•t c·∫£ tab content
            tabContents.forEach(content => {
                content.classList.remove('active');
            });
            
            // B·ªè active t·∫•t c·∫£ tab buttons
            tabButtons.forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Hi·ªÉn th·ªã tab ƒë∆∞·ª£c ch·ªçn
            document.getElementById(`${tabId}-tab`).classList.add('active');
            button.classList.add('active');
        });
    });
}

// Ki·ªÉm tra cache khi kh·ªüi ƒë·ªông
function checkCacheOnStartup() {
    const analysisData = cacheManager.getFromLocalCache(CACHE_KEYS.ANALYSIS_DATA);
    if (analysisData) {
        window.analysisData = analysisData;
        document.getElementById('analyzeBtn').disabled = false;
        document.getElementById('saveBtn').disabled = false;
        updateStatus('üìÇ ƒê√£ t·∫£i d·ªØ li·ªáu ph√¢n t√≠ch t·ª´ cache');
        displayAdvancedAnalysisResults();
    }
    
    const settings = cacheManager.getFromLocalCache(CACHE_KEYS.SETTINGS);
    if (settings) {
        document.getElementById('enableDeepAnalysis').checked = settings.enableDeepAnalysis;
        document.getElementById('enableVietnameseAnalysis').checked = settings.enableVietnameseAnalysis;
        document.getElementById('autoSaveResults').checked = settings.autoSaveResults;
    }
    
    updateCacheInfo();
}

// C·∫≠p nh·∫≠t th√¥ng tin cache
function updateCacheInfo() {
    let totalSize = 0;
    for (let key in localStorage) {
        if (localStorage.hasOwnProperty(key)) {
            totalSize += localStorage[key].length * 2; // X·∫•p x·ªâ k√≠ch th∆∞·ªõc byte
        }
    }
    
    const cacheInfo = document.getElementById('cacheInfo');
    cacheInfo.textContent = `B·ªô nh·ªõ cache: ${(totalSize / 1024).toFixed(2)} KB`;
}

// X√≥a cache
function clearCache() {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ d·ªØ li·ªáu cache?')) {
        cacheManager.clearCache();
        updateCacheInfo();
        updateStatus('‚úÖ ƒê√£ x√≥a cache th√†nh c√¥ng');
    }
}
// Th·ª±c hi·ªán ph√¢n t√≠ch n√¢ng cao
async function performAdvancedAnalysis(fileContents) {
    const analyzers = {
        basic: new BasicAnalyzer(),
        linguistic: new LinguisticAnalyzer(),
        character: new CharacterAnalyzer(),
        emotion: new EmotionAnalyzer(),
        theme: new ThemeAnalyzer(),
        style: new StyleAnalyzer(),
        narrative: new NarrativeAnalyzer(),
        context: new ContextAnalyzer(),
        rhetoric: new RhetoricAnalyzer()
    };
    
    const allContent = fileContents.map(f => f.content).join('\n\n');
    const fileNames = fileContents.map(f => f.name);
    
    // Th·ª±c hi·ªán c√°c ph√¢n t√≠ch
    const results = {
        totalFiles: fileContents.length,
        fileNames: fileNames,
        totalWords: analyzers.basic.countWords(allContent),
        totalCharacters: allContent.length,
        language: analyzers.linguistic.analyzeText(allContent),
        characters: analyzers.character.analyzeCharacters(allContent),
        emotions: analyzers.emotion.analyzeEmotions(allContent),
        themes: analyzers.theme.analyzeThemes(allContent),
        writingStyle: analyzers.style.analyzeStyle(allContent),
        plot: analyzers.narrative.analyzePlot(allContent),
        context: analyzers.context.analyzeContext(allContent),
        rhetoric: analyzers.rhetoric.analyzeRhetoric(allContent),
        timestamp: new Date().toISOString()
    };
    
    return results;
}
// T·∫°o truy·ªán t·ª± ƒë·ªông
async function generateStory() {
    if (!window.analysisData) {
        updateStatus('‚ùå Vui l√≤ng ph√¢n t√≠ch file tr∆∞·ªõc khi t·∫°o truy·ªán');
        return;
    }
    
    const storyTitle = document.getElementById('storyTitle').value || 
                      storyGenerator.generateStoryTitle(window.analysisData.themes[0]?.name);
    const chapterCount = parseInt(document.getElementById('chapterCount').value) || 50;
    
    updateStatus(`üìñ ƒêang t·∫°o truy·ªán "${storyTitle}" v·ªõi ${chapterCount} ch∆∞∆°ng...`);
    
    try {
        window.generatedStory = {
            title: storyTitle,
            chapters: [],
            generatedAt: new Date().toISOString(),
            basedOnAnalysis: window.analysisData.timestamp
        };
        
        // T·∫°o t·ª´ng ch∆∞∆°ng
        for (let i = 1; i <= chapterCount; i++) {
            const chapterTitle = storyGenerator.generateChapterTitle(i, window.analysisData.themes[0]?.name);
            updateStatus(`üìù ƒêang t·∫°o ch∆∞∆°ng ${i}: ${chapterTitle}`);
            
            // C·∫≠p nh·∫≠t progress bar
            const progressPercent = (i / chapterCount) * 100;
            document.getElementById('generationProgress').style.width = `${progressPercent}%`;
            
            const chapterContent = await storyGenerator.generateChapter(
                window.analysisData, i, chapterTitle
            );
            
            window.generatedStory.chapters.push({
                number: i,
                title: chapterTitle,
                content: chapterContent,
                wordCount: storyGenerator.countWords(chapterContent)
            });
            
            // Hi·ªÉn th·ªã xem tr∆∞·ªõc ch∆∞∆°ng m·ªõi nh·∫•t
            document.getElementById('storyPreview').innerHTML = `
                <h4>${chapterTitle}</h4>
                <p>${chapterContent.substring(0, 200)}...</p>
                <small>${storyGenerator.countWords(chapterContent)} t·ª´</small>
            `;
            
            // Ngh·ªâ m·ªôt ch√∫t ƒë·ªÉ tr√°nh block UI
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        updateStatus(`‚úÖ ƒê√£ t·∫°o xong truy·ªán "${storyTitle}"`);
        document.getElementById('saveStoryBtn').disabled = false;
        
    } catch (error) {
        console.error('L·ªói khi t·∫°o truy·ªán:', error);
        updateStatus(`‚ùå L·ªói khi t·∫°o truy·ªán: ${error.message}`);
    }
}

// L∆∞u truy·ªán l√™n Google Drive
async function saveStoryToDrive() {
    if (!window.generatedStory) {
        updateStatus('‚ùå Kh√¥ng c√≥ truy·ªán n√†o ƒë·ªÉ l∆∞u');
        return;
    }
    
    updateStatus('üìö ƒêang l∆∞u truy·ªán l√™n Google Drive...');
    
    try {
        // T·∫°o th∆∞ m·ª•c ch√≠nh QuanLyTruyen n·∫øu ch∆∞a c√≥
        const mainFolderId = await cacheManager.findOrCreateFolder('QuanLyTruyen');
        if (!mainFolderId) {
            throw new Error('Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c QuanLyTruyen');
        }
        
        // T·∫°o th∆∞ m·ª•c con v·ªõi t√™n truy·ªán
        const storyFolderId = await cacheManager.findOrCreateFolder(
            window.generatedStory.title, mainFolderId
        );
        
        if (!storyFolderId) {
            throw new Error('Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c truy·ªán');
        }
        
        // L∆∞u metadata truy·ªán
        await cacheManager.saveToDrive(
            `${window.generatedStory.title}_metadata`,
            window.generatedStory,
            storyFolderId
        );
        
        // L∆∞u t·ª´ng ch∆∞∆°ng
        for (const chapter of window.generatedStory.chapters) {
            const chapterFileName = `Ch∆∞∆°ng ${chapter.number} - ${chapter.title}.txt`;
            await cacheManager.saveToDrive(
                chapterFileName,
                chapter.content,
                storyFolderId
            );
        }
        
        updateStatus(`‚úÖ ƒê√£ l∆∞u truy·ªán "${window.generatedStory.title}" th√†nh c√¥ng!`);
        
    } catch (error) {
        console.error('L·ªói khi l∆∞u truy·ªán:', error);
        updateStatus(`‚ùå L·ªói khi l∆∞u truy·ªán: ${error.message}`);
    }
}
// L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch
async function saveAnalysisResults() {
    if (!window.analysisData) {
        updateStatus('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n t√≠ch ƒë·ªÉ l∆∞u');
        return;
    }
    
    updateStatus('üíæ ƒêang l∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch...');
    
    try {
        // L∆∞u v√†o cache local
        cacheManager.saveToLocalCache(CACHE_KEYS.ANALYSIS_DATA, window.analysisData);
        
        // L∆∞u c√†i ƒë·∫∑t
        const settings = {
            enableDeepAnalysis: document.getElementById('enableDeepAnalysis').checked,
            enableVietnameseAnalysis: document.getElementById('enableVietnameseAnalysis').checked,
            autoSaveResults: document.getElementById('autoSaveResults').checked
        };
        cacheManager.saveToLocalCache(CACHE_KEYS.SETTINGS, settings);
        
        // ƒê·ªìng b·ªô v·ªõi Google Drive n·∫øu ƒë∆∞·ª£c k·∫øt n·ªëi
        if (gapi.client.getToken()) {
            await cacheManager.syncWithDrive();
            updateStatus('‚úÖ ƒê√£ l∆∞u v√† ƒë·ªìng b·ªô k·∫øt qu·∫£ ph√¢n t√≠ch');
        } else {
            updateStatus('‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch v√†o cache local');
        }
        
    } catch (error) {
        console.error('L·ªói khi l∆∞u k·∫øt qu·∫£:', error);
        updateStatus(`‚ùå L·ªói khi l∆∞u: ${error.message}`);
    }
}

// T·∫£i k·∫øt qu·∫£ ph√¢n t√≠ch
async function loadAnalysisResults() {
    updateStatus('üìÇ ƒêang t·∫£i k·∫øt qu·∫£ ph√¢n t√≠ch...');
    
    try {
        let analysisData = null;
        
        // ∆Øu ti√™n t·∫£i t·ª´ Google Drive n·∫øu ƒë∆∞·ª£c k·∫øt n·ªëi
        if (gapi.client.getToken()) {
            analysisData = await cacheManager.loadFromDrive(CACHE_KEYS.ANALYSIS_DATA);
        }
        
        // N·∫øu kh√¥ng c√≥ t·ª´ Drive, th·ª≠ t·∫£i t·ª´ cache local
        if (!analysisData) {
            analysisData = cacheManager.getFromLocalCache(CACHE_KEYS.ANALYSIS_DATA);
        }
        
        if (analysisData) {
            window.analysisData = analysisData;
            displayAdvancedAnalysisResults();
            updateStatus('‚úÖ ƒê√£ t·∫£i k·∫øt qu·∫£ ph√¢n t√≠ch th√†nh c√¥ng');
            document.getElementById('generateBtn').disabled = false;
        } else {
            updateStatus('‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ph√¢n t√≠ch');
        }
        
    } catch (error) {
        console.error('L·ªói khi t·∫£i k·∫øt qu·∫£:', error);
        updateStatus(`‚ùå L·ªói khi t·∫£i: ${error.message}`);
    }
}
